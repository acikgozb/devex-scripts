#!/usr/bin/env bash

set -euo pipefail

program="rw-wifi"

# TODO: Add a new command to remove a known network.

cmd_turn_off_wifi="Turn off WiFi"
cmd_turn_on_wifi="Turn on WiFi"
cmd_connect="Connect to a network"
cmd_disconnect="Disconnect from the network"
cmd_exit="exit"

signal_threshold_low=40
signal_threshold_mid=60
signal_threshold_high=80

diag_message=""

connect() {
    rofi -e "Connecting..." &
    conn_pid=$!

    if grep -q -e "^${1}$" <(nmcli -g NAME connection 2> /dev/null); then
        kill "$conn_pid"

        rofi -e "Connecting to a known network..." &
        known_conn_pid=$!

        if ! nmcli connection up id "$1"; then
            diag_message="Connection to the known network $1 has failed. Remove the known network and try again..."
        fi

        kill "$known_conn_pid"
        return 0
    fi

    kill "$conn_pid"

    password=$(rofi -dmenu -p "password:")

    rofi -e "Connecting to a new network..." &
    new_conn_pid=$!

    if ! nmcli device wifi connect "$1" password "$password"; then
        diag_message="Incorrect password for the network $1. Try again..."
    fi

    kill "$new_conn_pid"
    return 0
}

scan() {
    rofi -e "Scanning available networks..." &
    placeholder_pid=$!

    scan_res=$(nmcli -f SSID,Signal -t dev wifi list)

    available_networks=()
    while read -r line; do
        if grep -q "^:" <<< "$line"; then
            continue
        fi

        IFS=':' read -r network_name signal <<< "$line"

        signal_pow=""
        if [ "$signal" -lt "$signal_threshold_low" ]; then
            signal_pow="(sig: <40)"
        elif [ "$signal" -ge "$signal_threshold_low" ] && \
            [ "$signal" -lt "$signal_threshold_mid" ]; then
            signal_pow="(sig: <60)"
        elif [ "$signal" -ge "$signal_threshold_mid" ] && \
            [ "$signal" -lt "$signal_threshold_high" ]; then
            signal_pow="(sig: <80)"
        else
            signal_pow="(sig: >80)"
        fi

        available_networks+=("$signal_pow $network_name")
    done <<< "$scan_res"

    scan_result=$(IFS=$'\n' ;echo -e "${available_networks[*]}")
    kill "$placeholder_pid"

    ssid=$(echo -e "$scan_result" | rofi -dmenu -i -p "network (type scan to re-scan):")

    if [ -z "$ssid" ]; then
        return 0
    fi

    if [ "$ssid" = "scan" ]; then
        scan
        return 0
    fi

    network_name="${ssid:11}"

    if ! grep -q " $network_name " <(nmcli dev wifi list); then
        diag_message="Network not found: $network_name"
        return 0
    fi

    connect "$network_name"
}

disconnect() {
    network_name="$1"
    rofi -e "Disconnecting from the network ${network_name}..." &
    placeholder_pid=$!

    if ! nmcli connection down id "$network_name"; then
        diag_message="Failed to disconnect from the network $network_name. Try again..."
    fi

    kill $placeholder_pid
    return 0
}

main() {
    commands=()

    wifi_status=$(nmcli --fields WIFI g | tail -n1)
    if [ "${wifi_status%% *}" = "enabled" ]; then
        commands+=("$cmd_turn_off_wifi" "$cmd_connect")
    else
        commands+=("$cmd_turn_on_wifi")
    fi

    active_network_name="$(nmcli -g NAME connection show --active | head -n1)"
    if [[ "$active_network_name" != "lo" ]]; then
        commands+=("$cmd_disconnect ($active_network_name)")
    fi

    cmd_menu_items=$(IFS=$'\n' ;echo "${commands[*]}")

    cmd=""
    if [ -z "$diag_message" ]; then
        cmd=$(echo -e "$cmd_menu_items" | rofi -dmenu -i -p "command (type $cmd_exit to close):")
    else
        cmd=$(echo -e "$cmd_menu_items" | rofi -dmenu -mesg "$diag_message" -i -p "command (type $cmd_exit to close):")
        diag_message=""
    fi

    case "$cmd" in
        "$cmd_turn_on_wifi")
            nmcli radio wifi on
            ;;
        "$cmd_turn_off_wifi")
            nmcli radio wifi off
            ;;
        "$cmd_connect")
            scan
            ;;
        "$cmd_disconnect"*)
            disconnect "$active_network_name"
            ;;
        "$cmd_exit")
            exit 0
            ;;
        *)
            diag_message="Invalid command provided: $cmd"
            ;;
    esac

    main
}

main
