#!/usr/bin/env bash

set -euo pipefail

program="rw-wifi"

cmd_turn_off_wifi="Turn off WiFi"
cmd_turn_on_wifi="Turn on WiFi"
cmd_connect="Connect to a network"
cmd_exit="exit"

signal_threshold_low=40
signal_threshold_mid=60
signal_threshold_high=80

connect() {
    rofi -e "Connecting..." &
    conn_pid=$!

    if grep -q -e "^${1}$" <(nmcli -g NAME connection 2> /dev/null); then
        kill "$conn_pid"

        rofi -e "Connecting to a known network..." &
        known_conn_pid=$!

        if nmcli connection up id "$1"; then
            kill "$known_conn_pid"
            return 0
        fi
    fi

    kill "$conn_pid"

    password=$(rofi -dmenu -p "password:")

    rofi -e "Connecting to a new network..." &
    new_conn_pid=$!

    if ! nmcli device wifi connect "$1" password "$password"; then
        echo "$program: could not connect to the network $1"
    fi

    kill "$new_conn_pid"
    return 0
}

scan() {
    rofi -e "Scanning available networks..." &
    placeholder_pid=$!

    scan_res=$(nmcli -f SSID,Signal -t dev wifi list)

    available_networks=()
    while read -r line; do
        if grep -q "^:" <<< "$line"; then
            continue
        fi

        IFS=':' read -r network_name signal <<< "$line"

        signal_pow=""
        if [ "$signal" -lt "$signal_threshold_low" ]; then
            signal_pow="(sig: <40)"
        elif [ "$signal" -ge "$signal_threshold_low" ] && \
            [ "$signal" -lt "$signal_threshold_mid" ]; then
            signal_pow="(sig: <60)"
        elif [ "$signal" -ge "$signal_threshold_mid" ] && \
            [ "$signal" -lt "$signal_threshold_high" ]; then
            signal_pow="(sig: <80)"
        else
            signal_pow="(sig: >80)"
        fi

        available_networks+=("$signal_pow $network_name")
    done <<< "$scan_res"

    scan_result=$(IFS=$'\n' ;echo "${available_networks[*]}")
    kill "$placeholder_pid"

    ssid=$(echo -e "$scan_result" | rofi -dmenu -i -p "network (type scan to re-scan):")

    if [ -z "$ssid" ]; then
        return 0
    fi

    if [ "$ssid" = "scan" ]; then
        scan
        return 0
    fi

    if ! grep -q " $ssid " <(nmcli dev wifi list); then
        echo "$program: network not found: $ssid" >&2
        exit 1
    fi

    connect "$ssid"
}

main() {
    commands=()

    wifi_status=$(nmcli --fields WIFI g | tail -n1)
    if [ "${wifi_status%% *}" = "enabled" ]; then
        commands+=("$cmd_turn_off_wifi" "$cmd_connect")
    else
        commands+=("$cmd_turn_on_wifi")
    fi

    cmd_menu_items=$(IFS=$'\n' ;echo "${commands[*]}")
    cmd_selection=$(echo -e "$cmd_menu_items" | rofi -dmenu -i -p "command (type $cmd_exit to close):")

    case "$cmd_selection" in
        "$cmd_turn_on_wifi")
            nmcli radio wifi on
            ;;
        "$cmd_turn_off_wifi")
            nmcli radio wifi off
            ;;
        "$cmd_connect")
            scan
            ;;
        "$cmd_exit")
            exit 0
            ;;
        *)
            ;;
    esac

    main
}

main
